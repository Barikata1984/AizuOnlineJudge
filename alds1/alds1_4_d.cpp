#include <algorithm>#include <iostream>#include <vector>#include <cmath>int main(){    int n;    float k;    std::cin >> n >> k;    std::vector<long long> vec(n), cumSum(n);    std::cin >> vec.at(0);    cumSum.at(0) = vec.at(0);    for(int i = 1; i < n; ++i){        std::cin >> vec.at(i);        cumSum.at(i) = vec.at(i) + cumSum.at(i - 1);    }    long long i = std::ceil(*(cumSum.end() - 1) / k);    while(true){        std::vector<long long> buf(1, 0);        auto itr = std::upper_bound(cumSum.begin(), cumSum.end(), i);        while(cumSum.end() != itr){            buf.push_back(*(itr - 1) - *(buf.end() - 1));            itr = std::upper_bound(itr, cumSum.end(), *itr + i);        }        if(*(buf.end() - 1) <= i){            break;        }         ++i;    }    std::cout << i << std::endl;    return 0;}