#include <iostream>#include <utility>#include <vector>#include <map>void print(std::vector<std::pair<std::string, int>>& readVec){    int n = readVec.size();    for(int i = 0; i < n; ++i){        std::cout << readVec.at(i).second << readVec.at(i).first;        if(n - 1 != i){            std::cout << " ";        }else{            std::cout << std::endl;        }    }}void isStable(std::multimap<std::string, int>& readMmp, std::vector<std::pair<std::string, int>>& readVec){    int n = readMmp.size();    bool flg = true;    auto mmpItr = readMmp.begin();    auto vecItr = readVec.begin();    while(flg && readMmp.end() != mmpItr && readVec.end() != vecItr){        flg = mmpItr->first == vecItr->first && mmpItr->second && vecItr->second;         ++mmpItr;        ++vecItr;     }    if(flg){        std::cout << "Stable" << std::endl;    }else{        std::cout << "Not stable" << std::endl;    }}std::vector<std::pair<std::string, int>> bubbleSort(std::vector<std::pair<std::string, int>> readVec){    int n = readVec.size(), count = 0;    bool flg = true; // existence of the left-adjacent element less than an interest one.    while(flg){        flg = false;        for(int j = n - 1; 0 < j; --j){            if(readVec.at(j).second < readVec.at(j - 1).second){                std::swap(readVec.at(j), readVec.at(j - 1));                flg = true;                ++count;            }        }    }    return readVec;}std::vector<std::pair<std::string, int>> selectionSort(std::vector<std::pair<std::string, int>> readVec){    int n = readVec.size(), count = 0;    for(int i = 0; i < n; ++i){        int minJ = i;        for(int j = i; j < n; ++j){            if(readVec.at(j).second < readVec.at(minJ).second){                minJ = j;            }        }                if(i != minJ){            std::swap(readVec.at(i), readVec.at(minJ));            ++count;        }    }    return readVec;}int main(){    int n;    std::cin >> n;    std::vector<std::pair<std::string, int>> a(n);    for(int i = 0; i < n; ++i){        std::string str;        std::cin >> str;        a.at(i) = std::make_pair(str.at(0), str.at(1) - 48);    }    std::multimap<std::string, int> mmp(a.begin(), a.end());    std::vector<std::pair<std::string, int>> vec(mmp.begin(), mmp.end());    print(vec);    auto bubbleSorted = bubbleSort(a), selectionSorted = selectionSort(a);    print(bubbleSorted);    isStable(mmp, bubbleSorted);    print(selectionSorted);    isStable(mmp, selectionSorted);    return 0;}